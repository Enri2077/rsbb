#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from benchmark_scripts import *
import benchmark_scripts
import rospy
import actionlib
from rsbb_benchmarking_messages.srv import *
from rockin_scoring.BenchmarkObject import *
#from inspect import *
from exceptions import Exception


scripts = {}
execute_request = None

def import_benchmark_scripts():
	
	global scripts
	
	print "imported scripts:"
	
	for module_name in benchmark_scripts.__all__:
		module = globals()[module_name]
		
		try:
			
			benchmark_object = module.BenchmarkObject()
			benchmark_code = ""
			
			try:
				
				benchmark_code = benchmark_object.get_benchmark_code()
				
			except AttributeError:
				raise BenchmarkCodeNotImplementedError("method get_benchmark_code not implemented in BenchmarkObject")
				#TODO publish benchmark_script_server SystemStatus.ERROR
				
			except TypeError:
				raise BenchmarkCodeNotImplementedError("Wrong number of attributes in get_benchmark_code method")
				#TODO publish benchmark_script_server SystemStatus.ERROR
				
			
			if type(benchmark_code) != type(""):
				print "type(benchmark_code) != type(\"\")"
				raise BenchmarkCodeNotImplementedError("Method get_benchmark_code in BenchmarkObject should return a string")
			
			scripts[benchmark_code] = benchmark_object
			
			print benchmark_code
			
			
		except BenchmarkCodeNotImplementedError as e:
			print e.parameter
			rospy.logerr("Error from script [%s]: %s", module_name, e.parameter)
			
		except ExecuteMethodNotImplementedError:
			rospy.logerr("NotImplementedError Exception")




class BenchmarkServer(object):
	
	def __init__(self, name):
		self._topic_name = name
		self._benchmark_request_service_server = rospy.Service(self._topic_name, BenchmarkRequest, self.execute_benchmark_callback)
	
	def execute_benchmark_callback(self, request):
		
		rospy.loginfo('execute_benchmark_callback: benchmark_code %s \t team: %s \t robot: %s\t run: %i' % (request.benchmark_code, request.team, request.robot, request.run))
		
		global execute_request
		
		execute_request = request.benchmark_code
		
		#TODO return false if request.benchmark_code not in scripts
		
		return BenchmarkRequestResponse(True)



def init_server():
	global execute_request
	
	rospy.init_node('rsbb_benchmark_server')
	rate = rospy.Rate(1) # 10hz
	
	import_benchmark_scripts()
	
	server = BenchmarkServer("init_benchmark")
	
	print "\nready to execute imported benchmark scripts"
	
	while not rospy.is_shutdown():
		
		if execute_request:
			try:
				
				print "start execute()"
				scripts[execute_request].execute()
				
			except ExecuteMethodNotImplementedError:
				rospy.logerr("Error for execute request [%s]: method execute(self) not implemented in BenchmarkObject", execute_request)
				#TODO publish benchmark_script_server SystemStatus.ERROR
				
			except Exception:
				rospy.logerr("Exception raised in benchmark script [%s]. Benchmark script terminated", execute_request)
				#TODO publish benchmark_script_server SystemStatus.ERROR
			
			execute_request = None
			print "finished execute()"
			
			return
		
		rate.sleep()


if __name__ == '__main__':
	try:
		init_server()
	except rospy.ROSInterruptException:
		pass
		









