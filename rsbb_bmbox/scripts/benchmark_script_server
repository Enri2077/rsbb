#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from exceptions import Exception
import rospy

from benchmark_scripts import *
import benchmark_scripts
from rsbb_benchmarking_messages.srv import *
from rsbb_benchmarking_messages.msg import SystemStatus
from rockin_scoring.BenchmarkObjects import *


scripts = {}
execute_request = None
execute_request_info = None




class BenchmarkServer(object):
	
	def __init__(self, init_benchmark_service_name, terminate_benchmark_service_name):
		self._init_benchmark_service_name = init_benchmark_service_name
		self._init_benchmark_request_service_server = rospy.Service(self._init_benchmark_service_name, BenchmarkRequest, self.execute_benchmark_callback)
		
		self._terminate_benchmark_service_name = terminate_benchmark_service_name
		self._terminate_benchmark_request_service_server = rospy.Service(self._terminate_benchmark_service_name, TerminateBenchmarkScript, self.terminate_benchmark_callback)
		self._terminate_benchmark_request = False
		
		self._status = SystemStatus()
		self._status.status = SystemStatus.NORMAL
		self._status_pub = rospy.Publisher("/rsbb_system_status/bmbox", SystemStatus, queue_size=10)
		
		rospy.init_node('rsbb_benchmark_server')
		
		self.import_benchmark_scripts()
	
	def execute_benchmark_callback(self, request):
		rospy.loginfo('execute_benchmark_callback: benchmark_code %s \t team: %s \t robot: %s\t run: %i' % (request.benchmark_code, request.team, request.robot, request.run))
		
		global execute_request
		global execute_request_info
		execute_request = request.benchmark_code
		execute_request_info = request
		
		return BenchmarkRequestResponse(True)
		#TODO return false if request.benchmark_code not in scripts
	
	
	def terminate_benchmark_callback(self, request):
		rospy.loginfo('terminate_benchmark_callback')
		
		global execute_request
		
		if execute_request == None:
			self.publish_system_status("restarting")
			self._terminate_benchmark_request = True
			return TerminateBenchmarkScriptResponse(True)
			
		
		if execute_request != None: print "can_terminate_benchmark: ", scripts[execute_request].can_terminate_benchmark()
		
		# TODO just restart the node if execute_request == None
		
		if execute_request == None or self._terminate_benchmark_request == True or not scripts[execute_request].can_terminate_benchmark():
			return TerminateBenchmarkScriptResponse(False)
		
		self._terminate_benchmark_request = True
		
		scripts[execute_request].terminate_benchmark()
		
		return TerminateBenchmarkScriptResponse(True)
		
		#TODO return false if benchmark is not in state BmBoxState.END
	
	
	def publish_system_status(self, d = ""):
		self._status.header.stamp = rospy.Time.now()
		self._status.status_description = d
		self._status_pub.publish(self._status)


	def import_benchmark_scripts(self):
	
		global scripts
	
		print "imported scripts:"
	
		for module_name in benchmark_scripts.__all__:
			module = globals()[module_name]
		
			try:
			
				benchmark_object = module.BenchmarkObject()
				benchmark_code = ""
			
				try:
				
					benchmark_code = benchmark_object.get_benchmark_code()
				
				except AttributeError:
					raise BenchmarkCodeNotImplementedError("method get_benchmark_code not implemented in BenchmarkObject")
				
				except TypeError:
					raise BenchmarkCodeNotImplementedError("Wrong number of attributes in get_benchmark_code method")
				
			
				if type(benchmark_code) != type(""):
					print "type(benchmark_code) != type(\"\")"
					raise BenchmarkCodeNotImplementedError("Method get_benchmark_code in BenchmarkObject should return a string")
						
				scripts[benchmark_code] = benchmark_object
			
				print benchmark_code
			
			
			except BenchmarkCodeNotImplementedError as e:
				self._status.status = SystemStatus.ERROR
				self.publish_system_status("error")
				print e.parameter
				rospy.logerr("Error from script [%s]: %s", module_name, e.parameter)
			
			except ExecuteMethodNotImplementedError: #TODO useless
				rospy.logerr("NotImplementedError Exception")


	def run(self):
		global execute_request
		
		rate = rospy.Rate(10) # 10hz
		
		print "\nready to execute imported benchmark scripts"
		
		while not rospy.is_shutdown():
			
			if execute_request:
			
				try:
					print "start execute()"
					scripts[execute_request].setup(execute_request_info.team, execute_request_info.run)
					scripts[execute_request].wrapped_execute()
				
				except ExecuteMethodNotImplementedError as e:
					rospy.logerr("Error for execute request [%s]: method execute(self) not implemented in BenchmarkObject", execute_request)
					rospy.logerr(e)
					self._status.status = SystemStatus.ERROR
					self.publish_system_status("error")
				
				except rospy.ROSInterruptException as e:
					rospy.loginfo("Shutdown signal received")
					rospy.loginfo(e)
					self.publish_system_status("restarting")
				
				except Exception as e:
					rospy.logerr("Exception raised in benchmark script [%s]. Benchmark script terminated", execute_request)
					self._status.status = SystemStatus.ERROR
					self.publish_system_status("error")
					rospy.signal_shutdown("Exception raised in benchmark script")
					raise
				
				execute_request = None
				print "finished execute()"
				
#				rospy.spin() #TODO shutdown
				self.publish_system_status("restarting")
				rospy.signal_shutdown("Restarting node")

			
			else:
				if self._terminate_benchmark_request:
					self.publish_system_status("restarting")
					rospy.signal_shutdown("Restarting node")
				else:
					self.publish_system_status("waiting")
			
			rate.sleep()


if __name__ == '__main__':
	try:
		server = BenchmarkServer("/bmbox/init_benchmark", "/bmbox/stop_benchmark")
		server.run()
	except rospy.ROSInterruptException:
		pass
		









